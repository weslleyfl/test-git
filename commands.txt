git config --system --edit ---- arquivo do usuario
git config --local --edit ---- arquivo local -- este tem prioridade 
git config --global --edit --- arquivo do usuario

--- para colocar o vs code como editor
git config --global core.editor code


-- Comandos
git status -s


Commandos para o atalho
! na execuçao do comando com shell command
s = !git status -s
c = !git add --all && git commit -m
lg = log --graph --format

commit este arquivo aqui, junto com o commit anterior - voce consegue juntar em um commit so
git commit --amend --no-edit

-Alterar o branch master para o main - o que esta no github
# create main branch locally, taking the history from master
git branch -m master main

Error: fatal: refusing to merge unrelated histories
git pull origin master --allow-unrelated-histories


-- Colocar o arquivo na area de rascunho - stash
git add .
git stash -- Saved working directory and index state WIP on main: 38a49e4 pull para atualizar os arquivos

Para voltar ao stash 
git stash apply 
ou
git stash pop  --- remover o arquivo ou limpa a area de stash
clear
list

-- aula 3

Conventinal Commit Messages

https://gist.github.com/qoomon/5dfcdf8eec66a051ecd85625518cfd13
https://www.conventionalcommits.org/

Have a look at CLI util git-conventional-commits to ensure this conventions and generate changelogs
https://github.com/qoomon/git-conventional-commits

Install
npm install --global git-conventional-commits

<type>(<optional scope>): <subject>

Types
API relevant changes
feat Commits, that adds a new feature
fix Commits, that fixes a bug
refactor Commits, that rewrite/restructure your code, however does not change any behaviour
perf Commits are special refactor commits, that improves performance
style Commits, that do not affect the meaning (white-space, formatting, missing semi-colons, etc)
test Commits, that add missing tests or correcting existing tests
docs Commits, that affect documentation only
build Commits, that affect build components like build tool, ci pipeline, dependencies, project version, ...
ops Commits, that affect operational components like infrastructure, deployment, backup, recovery, ...
chore Miscellaneous commits e.g. modifying .gitignore
realease

Examples
feat(shopping cart): add the amazing button
feat: remove ticket list endpoint
fix: add missing parameter to service call
The error occurred because of <reasons>.

build(release): bump version to 1.0.0
build: update dependencies
refactor: implement calculation method as recursion
style: remove empty line

-- comandos Log
git log --oneline
git log --pretty=format:'%cn'
git log --pretty=format:'%C(blue)%h %C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr'
https://git-scm.com/docs/pretty-formats

Usa muito a tag para marcar versoes que estao subindo para o servidor / versao x.x, release 1.0 
--tag
git tag 1.0
git tag 1.0 -m "realease 1.0" -- tag anotadas
git tag -a "0.1.beta" -m "realease 0.1.beta" e5d09f -- tag anotada para um commit antigo/anterior 

git push origin main --follow-tags -- para subir as tags anotadas para o github / servidor (--tags - manda todas as tags ate as nao anotadas)

[alias]
[push]
followTags = true   --- para incluir automaticamente em todos os push as tags nomeadas 

remover a tag
git tag -d "1.0"  --- removendo local 
git push --delete origin "0.1.beta"  ---- removendo do github / servidor

--- Aula 4

Git Reset   --soft muito usado para renomear o seu commit ele volta para o stage
			--mixed é o padrao. ele volta para o local workspace - ele nao modifica esta area
			--hard - desfaz tudo que voce fez tanto no workspace e na area de index/stage e commit tambem 
Reset Limpa tudo (arquivos) que esta acima

Git Revert
Reverter um commit -- manda para a area de stage
Ele nao limpa tudo que esta acima dele, ele cria um novo commit acima da arvore
git revert 789997 --no-edit --- ele nao abre o editor para voce confirmar/conferir
--no-commit --- nao gera o commit automatico

-- Aula 5 Git - Rm, Clean e Checkout

git checkout
git checkout . ou o nome do arquivo --> ele vai desfazer as alterações no arquivo ou recuperar o arquivo todo 
Ele nao funciona em arquivo untracked e so funciona na workspace (unstaged) (nao funciona na area de stage/index git add .)
Voce pode usar o git reset para voltar o arquivo para o estado anterior, caso ele esteja na area de staged.

git checkout - permitir investigar um commit - verificar como era o codigo naquele momento/versao 
git checkout 699freou ou a tag 
Voce vai para um modo desconectado, fora de uma branch  , voce fica em uma branch temporaria

git checkout "branch" -- voce consegue mudar de branch 
Caso voce queira mudar o codigo neste ponto do tempo, voce tem que criar uma branch nova, no momento que voce estiver dentro da branch temporaria
git checkout -b 'fix/index' (nome da branch) --> para criar uma branch com o checkout

git clean 
git clean -n -> serve para remover um arquivo que esta como untracked 
-n --> te mostra quais arquivo serao removidos antes de remover - boa pratica colocar neste comando 
git clean -f --> para remover, se nao ele nao remover  

fatal: clean.requireForce defaults to true and neither -i, -n, nor -f given; refusing to clean
Caso voce queira alterar o comportamento padrao de nao apagar o arquivo direto 
git config --local clean.requireForce false
git config --edit
--global 
--local
--system
git clean --> por padrao nao remover arquivo untracked dentro de pasta 
Ex: Teste/Index.js 
nao vai remover o arquivo index pois ele esta dentro da pasta Teste/
Para isso, voce tem que passar o flag 
git clean -nd --> ai remover dentro da pasta (ou so -d)
 
git rm
git rm --> apagar arquivo ja traquiado pelo git tracked (commit)
git rm 'nomedoarqivo.js'
git rm -r --> remove dentro da pasta

git rm 'nomarquivo.js' --cached --> para forçar o git untracked o arquivo - deixou de traquiar o arquivo

